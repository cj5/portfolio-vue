{"remainingRequest":"/Users/chrisstack/Repos/portfolio-vue/node_modules/babel-loader/lib/index.js!/Users/chrisstack/Repos/portfolio-vue/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/chrisstack/Repos/portfolio-vue/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/chrisstack/Repos/portfolio-vue/src/components/CellularAutomata.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/chrisstack/Repos/portfolio-vue/src/components/CellularAutomata.vue","mtime":1587139916000},{"path":"/Users/chrisstack/Repos/portfolio-vue/node_modules/cache-loader/dist/cjs.js","mtime":1539835375000},{"path":"/Users/chrisstack/Repos/portfolio-vue/node_modules/babel-loader/lib/index.js","mtime":1539835372000},{"path":"/Users/chrisstack/Repos/portfolio-vue/node_modules/cache-loader/dist/cjs.js","mtime":1539835375000},{"path":"/Users/chrisstack/Repos/portfolio-vue/node_modules/vue-loader/lib/index.js","mtime":1539835376000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.number.constructor\";\nimport \"core-js/modules/es6.array.iterator\";\nimport \"core-js/modules/es6.promise\";\nimport \"core-js/modules/es7.promise.finally\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { nlToArr } from '../helpers';\nexport default {\n  name: 'CellularAutomata',\n  props: {\n    heroHt: Number\n  },\n  data: function data() {\n    return {\n      cellSize: 10,\n      timeCount: 0,\n      timeInterval: 50,\n      pattern: []\n    };\n  },\n  computed: {\n    cellsPerRow: function cellsPerRow() {\n      return Math.ceil(window.innerWidth / this.cellSize);\n    },\n    rows: function rows() {\n      return Math.ceil(this.heroHt / this.cellSize);\n    }\n  },\n  methods: {\n    randomizeFirstRow: function randomizeFirstRow() {\n      nlToArr(this.$refs.cellRow[0].childNodes).map(function (x) {\n        var rand = Math.round(Math.random());\n        x.classList.add(rand === 0 ? 'false' : 'true');\n      });\n    },\n    automatize: function automatize(rule) {\n      for (var i = 1; i < this.rows; i++) {\n        var prevRow = this.$refs.cellRow[i - 1];\n\n        for (var j = 0; j < this.cellsPerRow; j++) {\n          if (j > 0 && j < this.cellsPerRow - 1) {\n            this.pattern.push(prevRow.childNodes[j - 1].className);\n            this.pattern.push(prevRow.childNodes[j].className);\n            this.pattern.push(prevRow.childNodes[j + 1].className);\n          } else if (j === 0) {\n            this.pattern.push('false');\n            this.pattern.push(prevRow.childNodes[j].className);\n            this.pattern.push(prevRow.childNodes[j + 1].className);\n          } else if (j === this.cellsPerRow - 1) {\n            this.pattern.push(prevRow.childNodes[j - 1].className);\n            this.pattern.push(prevRow.childNodes[j].className);\n            this.pattern.push('false');\n          }\n\n          if (rule()) {\n            this.$refs.cellRow[i].childNodes[j].classList.add('true');\n          } else {\n            this.$refs.cellRow[i].childNodes[j].classList.add('false');\n          }\n\n          this.pattern = [];\n        }\n      }\n    },\n    showRows: function showRows() {\n      var _this = this;\n\n      var _loop = function _loop(i) {\n        setTimeout(function () {\n          return _this.$refs.cellRow[i].classList.add('show');\n        }, _this.timeCount);\n        _this.timeCount = _this.timeCount + _this.timeInterval;\n      };\n\n      for (var i = 0; i < this.rows; i++) {\n        _loop(i);\n      }\n    },\n    hideRows: function hideRows() {\n      for (var i = 0; i < this.rows; i++) {\n        this.$refs.cellRow[i].classList.remove('show');\n\n        for (var j = 0; j < this.cellsPerRow; j++) {\n          this.$refs.cellRow[i].childNodes[j].classList.remove('true');\n          this.$refs.cellRow[i].childNodes[j].classList.remove('false');\n        }\n      }\n    },\n    arraysEqual: function arraysEqual(a, b) {\n      if (a === b) return true;\n      if (a == null || b == null) return false;\n      if (a.length != b.length) return false;\n\n      for (var i = 0; i < a.length; i++) {\n        if (a[i] !== b[i]) return false;\n      }\n\n      return true;\n    },\n    // CELLULAR AUTOMATA RULES\n    rule73: function rule73() {\n      return this.arraysEqual(this.pattern, ['true', 'true', 'false']) || this.arraysEqual(this.pattern, ['false', 'true', 'true']) || this.arraysEqual(this.pattern, ['false', 'false', 'false']);\n    },\n    rule89: function rule89() {\n      return this.arraysEqual(this.pattern, ['true', 'true', 'false']) || this.arraysEqual(this.pattern, ['true', 'false', 'false']) || this.arraysEqual(this.pattern, ['false', 'true', 'true']) || this.arraysEqual(this.pattern, ['false', 'false', 'false']);\n    },\n    rule126: function rule126() {\n      return this.arraysEqual(this.pattern, ['true', 'true', 'false']) || this.arraysEqual(this.pattern, ['true', 'false', 'true']) || this.arraysEqual(this.pattern, ['true', 'false', 'false']) || this.arraysEqual(this.pattern, ['false', 'true', 'true']) || this.arraysEqual(this.pattern, ['false', 'true', 'false']) || this.arraysEqual(this.pattern, ['false', 'false', 'true']);\n    },\n    rule150: function rule150() {\n      return this.arraysEqual(this.pattern, ['true', 'true', 'true']) || this.arraysEqual(this.pattern, ['true', 'false', 'false']) || this.arraysEqual(this.pattern, ['false', 'true', 'false']) || this.arraysEqual(this.pattern, ['false', 'false', 'true']);\n    },\n    rule183: function rule183() {\n      return this.arraysEqual(this.pattern, ['true', 'true', 'true']) || this.arraysEqual(this.pattern, ['true', 'false', 'true']) || this.arraysEqual(this.pattern, ['true', 'false', 'false']) || this.arraysEqual(this.pattern, ['false', 'true', 'false']) || this.arraysEqual(this.pattern, ['false', 'false', 'true']) || this.arraysEqual(this.pattern, ['false', 'false', 'false']);\n    },\n    // [END] CELLULAR AUTOMATA RULES\n    switchRule: function switchRule(rule, event) {\n      var _this2 = this;\n\n      this.hideRows();\n      this.randomizeFirstRow();\n      this.$nextTick(function () {\n        _this2.automatize(rule);\n\n        _this2.timeCount = 0;\n\n        _this2.showRows();\n      });\n      nlToArr(this.$refs.ruleSelectors.childNodes).map(function (x) {\n        x.classList.remove('active');\n      });\n      event.target.classList.add('active');\n    }\n  },\n  mounted: function mounted() {\n    this.randomizeFirstRow();\n    this.automatize(this.rule150);\n    console.log(this.$refs.ruleSelectors);\n    this.$refs.ruleSelectors.childNodes[3].classList.add('active');\n    this.showRows();\n  }\n};",{"version":3,"sources":["CellularAutomata.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"automata-wrap\">\n    <div \n      v-for=\"(i, key1) in rows\"\n      :key=\"key1\"\n      class=\"cell-row flex\" \n      ref=\"cellRow\"\n    >\n      <div\n        v-for=\"(j, key2) in cellsPerRow\" \n        :key=\"key2\"\n        :style=\"`width: ${cellSize}px; height: ${cellSize}px;`\"\n        ref=\"cell\"\n      ></div>\n    </div>\n    <!-- <div class=\"container\"> -->\n      <div class=\"automata-selector\">\n        <a href=\"https://mathworld.wolfram.com/ElementaryCellularAutomaton.html\" target=\"_blank\">Cellular Automaton ></a>\n        <div ref=\"ruleSelectors\">\n          <a \n            role=\"button\" \n            @click=\"switchRule(rule73, $event)\"\n          >Rule 73</a>\n          <a \n            role=\"button\" \n            @click=\"switchRule(rule89, $event)\"\n          >Rule 89</a>\n          <a \n            role=\"button\" \n            @click=\"switchRule(rule126, $event)\"\n          >Rule 126</a>\n          <a \n            role=\"button\" \n            @click=\"switchRule(rule150, $event)\"\n          >Rule 150</a>\n          <a \n            role=\"button\" \n            @click=\"switchRule(rule183, $event)\"\n          >Rule 183</a>\n        </div>\n      </div>\n    <!-- </div> -->\n  </div>\n</template>\n\n<script>\nimport { nlToArr } from '../helpers'\n\nexport default {\n  name: 'CellularAutomata',\n  props: {\n    heroHt: Number\n  },\n  data() {\n    return {\n      cellSize: 10,\n      timeCount: 0,\n      timeInterval: 50,\n      pattern: [],\n    }\n  },\n  computed: {\n    cellsPerRow() {\n      return Math.ceil(window.innerWidth / this.cellSize)\n    },\n    rows() {\n      return Math.ceil(this.heroHt / this.cellSize)\n    },\n  },\n  methods: {\n    randomizeFirstRow() {\n      nlToArr(this.$refs.cellRow[0].childNodes).map(x => {\n        let rand = Math.round(Math.random())\n        x.classList.add(rand === 0 ? 'false' : 'true')\n      })\n    },\n    automatize(rule) {\n      for (let i = 1; i < this.rows; i++) {\n        let prevRow = this.$refs.cellRow[i - 1]\n        for (let j = 0; j < this.cellsPerRow; j++) {\n          if (j > 0 && j < this.cellsPerRow - 1) {\n            this.pattern.push(prevRow.childNodes[j - 1].className)\n            this.pattern.push(prevRow.childNodes[j].className)\n            this.pattern.push(prevRow.childNodes[j + 1].className)\n          } else if (j === 0) {\n            this.pattern.push('false')\n            this.pattern.push(prevRow.childNodes[j].className)\n            this.pattern.push(prevRow.childNodes[j + 1].className)\n          } else if (j === this.cellsPerRow - 1) {\n            this.pattern.push(prevRow.childNodes[j - 1].className)\n            this.pattern.push(prevRow.childNodes[j].className)\n            this.pattern.push('false')\n          }\n          if (rule()) {\n            this.$refs.cellRow[i].childNodes[j].classList.add('true')\n          } else {\n            this.$refs.cellRow[i].childNodes[j].classList.add('false')\n          }\n          this.pattern = []\n        }\n      }\n    },\n    showRows() {\n      for (let i = 0; i < this.rows; i++) {\n        setTimeout(() => this.$refs.cellRow[i].classList.add('show'), this.timeCount)\n        this.timeCount = this.timeCount + this.timeInterval\n      }\n    },\n    hideRows() {\n      for (let i = 0; i < this.rows; i++) {\n        this.$refs.cellRow[i].classList.remove('show')\n        for (let j = 0; j < this.cellsPerRow; j++) {\n          this.$refs.cellRow[i].childNodes[j].classList.remove('true')\n          this.$refs.cellRow[i].childNodes[j].classList.remove('false')\n        }\n      }\n    },\n    arraysEqual(a, b) {\n      if (a === b) return true\n      if (a == null || b == null) return false\n      if (a.length != b.length) return false\n\n      for (let i = 0; i < a.length; i++) {\n        if (a[i] !== b[i]) return false\n      }\n      return true\n    },\n    // CELLULAR AUTOMATA RULES\n    rule73() {\n      return this.arraysEqual(this.pattern, ['true', 'true', 'false']) ||\n      this.arraysEqual(this.pattern, ['false', 'true', 'true']) ||\n      this.arraysEqual(this.pattern, ['false', 'false', 'false'])\n    },\n    rule89() {\n      return this.arraysEqual(this.pattern, ['true', 'true', 'false']) ||\n      this.arraysEqual(this.pattern, ['true', 'false', 'false']) ||\n      this.arraysEqual(this.pattern, ['false', 'true', 'true']) ||\n      this.arraysEqual(this.pattern, ['false', 'false', 'false'])\n    },\n    rule126() {\n      return this.arraysEqual(this.pattern, ['true', 'true', 'false']) ||\n      this.arraysEqual(this.pattern, ['true', 'false', 'true']) ||\n      this.arraysEqual(this.pattern, ['true', 'false', 'false']) ||\n      this.arraysEqual(this.pattern, ['false', 'true', 'true']) ||\n      this.arraysEqual(this.pattern, ['false', 'true', 'false']) ||\n      this.arraysEqual(this.pattern, ['false', 'false', 'true'])\n    },\n    rule150() {\n      return this.arraysEqual(this.pattern, ['true', 'true', 'true']) ||\n      this.arraysEqual(this.pattern, ['true', 'false', 'false']) ||\n      this.arraysEqual(this.pattern, ['false', 'true', 'false']) ||\n      this.arraysEqual(this.pattern, ['false', 'false', 'true'])\n    },\n    rule183() {\n      return this.arraysEqual(this.pattern, ['true', 'true', 'true']) ||\n      this.arraysEqual(this.pattern, ['true', 'false', 'true']) ||\n      this.arraysEqual(this.pattern, ['true', 'false', 'false']) ||\n      this.arraysEqual(this.pattern, ['false', 'true', 'false']) ||\n      this.arraysEqual(this.pattern, ['false', 'false', 'true']) ||\n      this.arraysEqual(this.pattern, ['false', 'false', 'false'])\n    },\n    // [END] CELLULAR AUTOMATA RULES\n    switchRule(rule, event) {\n      this.hideRows()\n      this.randomizeFirstRow()\n      this.$nextTick(() => {\n        this.automatize(rule)\n        this.timeCount = 0\n        this.showRows()\n      })\n      nlToArr(this.$refs.ruleSelectors.childNodes).map(x => {\n        x.classList.remove('active')\n      })\n      event.target.classList.add('active')\n    }\n  },\n  mounted() {\n    this.randomizeFirstRow()\n    this.automatize(this.rule150)\n    console.log(this.$refs.ruleSelectors)\n    this.$refs.ruleSelectors.childNodes[3].classList.add('active')\n    this.showRows()\n  }\n}\n</script>"],"sourceRoot":"src/components"}]}