{"remainingRequest":"/Users/chrisstack/Repos/portfolio-vue/node_modules/babel-loader/lib/index.js!/Users/chrisstack/Repos/portfolio-vue/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/chrisstack/Repos/portfolio-vue/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/chrisstack/Repos/portfolio-vue/src/components/CellularAutomata.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/chrisstack/Repos/portfolio-vue/src/components/CellularAutomata.vue","mtime":1587039921000},{"path":"/Users/chrisstack/Repos/portfolio-vue/node_modules/cache-loader/dist/cjs.js","mtime":1539835375000},{"path":"/Users/chrisstack/Repos/portfolio-vue/node_modules/babel-loader/lib/index.js","mtime":1539835372000},{"path":"/Users/chrisstack/Repos/portfolio-vue/node_modules/cache-loader/dist/cjs.js","mtime":1539835375000},{"path":"/Users/chrisstack/Repos/portfolio-vue/node_modules/vue-loader/lib/index.js","mtime":1539835376000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.number.constructor\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  name: 'CellularAutomata',\n  props: {\n    heroHt: Number\n  },\n  data: function data() {\n    return {\n      cellSize: 10,\n      timeCount: 0,\n      timeInterval: 100,\n      pattern: []\n    };\n  },\n  computed: {\n    cellsPerRow: function cellsPerRow() {\n      return Math.ceil(window.innerWidth / this.cellSize);\n    },\n    rows: function rows() {\n      return Math.ceil(this.heroHt / this.cellSize);\n    }\n  },\n  methods: {\n    arraysEqual: function arraysEqual(a, b) {\n      if (a === b) return true;\n      if (a == null || b == null) return false;\n      if (a.length != b.length) return false;\n\n      for (var i = 0; i < a.length; i++) {\n        if (a[i] !== b[i]) return false;\n      }\n\n      return true;\n    },\n    rule150: function rule150() {\n      return this.arraysEqual(this.pattern, ['true', 'true', 'true']) || this.arraysEqual(this.pattern, ['true', 'false', 'false']) || this.arraysEqual(this.pattern, ['false', 'true', 'false']) || this.arraysEqual(this.pattern, ['false', 'false', 'true']);\n    },\n    rule126: function rule126() {\n      return this.arraysEqual(this.pattern, ['true', 'true', 'false']) || this.arraysEqual(this.pattern, ['true', 'false', 'true']) || this.arraysEqual(this.pattern, ['true', 'false', 'false']) || this.arraysEqual(this.pattern, ['false', 'true', 'true']) || this.arraysEqual(this.pattern, ['false', 'true', 'false']) || this.arraysEqual(this.pattern, ['false', 'false', 'true']);\n    },\n    rule73: function rule73() {\n      return this.arraysEqual(this.pattern, ['true', 'true', 'false']) || this.arraysEqual(this.pattern, ['false', 'true', 'true']) || this.arraysEqual(this.pattern, ['false', 'false', 'false']);\n    },\n    rule89: function rule89() {\n      return this.arraysEqual(this.pattern, ['true', 'true', 'false']) || this.arraysEqual(this.pattern, ['true', 'false', 'false']) || this.arraysEqual(this.pattern, ['false', 'true', 'true']) || this.arraysEqual(this.pattern, ['false', 'false', 'false']);\n    }\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    var nlToArr = function nlToArr(el) {\n      return Array.prototype.slice.call(el);\n    };\n\n    nlToArr(this.$refs.cellRow[0].childNodes).map(function (x) {\n      var rand = Math.round(Math.random());\n      x.classList.add(rand === 0 ? 'false' : 'true');\n    });\n\n    for (var i = 1; i < this.rows; i++) {\n      for (var j = 0; j < this.cellsPerRow; j++) {\n        if (j > 0 && j < this.cellsPerRow - 1) {\n          this.pattern.push(this.$refs.cellRow[i - 1].childNodes[j - 1].className);\n          this.pattern.push(this.$refs.cellRow[i - 1].childNodes[j].className);\n          this.pattern.push(this.$refs.cellRow[i - 1].childNodes[j + 1].className);\n        } else if (j === 0) {\n          this.pattern.push('false');\n          this.pattern.push(this.$refs.cellRow[i - 1].childNodes[j].className);\n          this.pattern.push(this.$refs.cellRow[i - 1].childNodes[j + 1].className);\n        } else if (j === this.cellsPerRow - 1) {\n          this.pattern.push(this.$refs.cellRow[i - 1].childNodes[j - 1].className);\n          this.pattern.push(this.$refs.cellRow[i - 1].childNodes[j].className);\n          this.pattern.push('false');\n        }\n\n        if (this.rule126()) {\n          this.$refs.cellRow[i].childNodes[j].classList.add('true');\n        } else {\n          this.$refs.cellRow[i].childNodes[j].classList.add('false');\n        }\n\n        this.pattern = [];\n      }\n    }\n\n    var _loop = function _loop(_i) {\n      setTimeout(function () {\n        return _this.$refs.cellRow[_i].classList.add('show');\n      }, _this.timeCount);\n      _this.timeCount = _this.timeCount + _this.timeInterval;\n    };\n\n    for (var _i = 0; _i < this.rows; _i++) {\n      _loop(_i);\n    }\n  }\n};",{"version":3,"sources":["CellularAutomata.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"cell-wrap\">\n    <div \n      v-for=\"(i, key1) in rows\"\n      :key=\"key1\"\n      class=\"cell-row flex\" \n      ref=\"cellRow\"\n    >\n      <div\n        v-for=\"(j, key2) in cellsPerRow\" \n        :key=\"key2\"\n        :style=\"`width: ${cellSize}px; height: ${cellSize}px;`\"\n        ref=\"cell\"\n      ></div>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'CellularAutomata',\n  props: {\n    heroHt: Number\n  },\n  data() {\n    return {\n      cellSize: 10,\n      timeCount: 0,\n      timeInterval: 100,\n      pattern: [],\n    }\n  },\n  computed: {\n    cellsPerRow() {\n      return Math.ceil(window.innerWidth / this.cellSize)\n    },\n    rows() {\n      return Math.ceil(this.heroHt / this.cellSize)\n    }\n  },\n  methods: {\n    arraysEqual(a, b) {\n      if (a === b) return true\n      if (a == null || b == null) return false\n      if (a.length != b.length) return false\n\n      for (let i = 0; i < a.length; i++) {\n        if (a[i] !== b[i]) return false\n      }\n      return true\n    },\n    rule150() {\n      return this.arraysEqual(this.pattern, ['true', 'true', 'true']) ||\n      this.arraysEqual(this.pattern, ['true', 'false', 'false']) ||\n      this.arraysEqual(this.pattern, ['false', 'true', 'false']) ||\n      this.arraysEqual(this.pattern, ['false', 'false', 'true'])\n    },\n    rule126() {\n      return this.arraysEqual(this.pattern, ['true', 'true', 'false']) ||\n      this.arraysEqual(this.pattern, ['true', 'false', 'true']) ||\n      this.arraysEqual(this.pattern, ['true', 'false', 'false']) ||\n      this.arraysEqual(this.pattern, ['false', 'true', 'true']) ||\n      this.arraysEqual(this.pattern, ['false', 'true', 'false']) ||\n      this.arraysEqual(this.pattern, ['false', 'false', 'true'])\n    },\n    rule73() {\n      return this.arraysEqual(this.pattern, ['true', 'true', 'false']) ||\n      this.arraysEqual(this.pattern, ['false', 'true', 'true']) ||\n      this.arraysEqual(this.pattern, ['false', 'false', 'false'])\n    },\n    rule89() {\n      return this.arraysEqual(this.pattern, ['true', 'true', 'false']) ||\n      this.arraysEqual(this.pattern, ['true', 'false', 'false']) ||\n      this.arraysEqual(this.pattern, ['false', 'true', 'true']) ||\n      this.arraysEqual(this.pattern, ['false', 'false', 'false'])\n    },\n  },\n  mounted() {\n    const nlToArr = el => Array.prototype.slice.call(el)\n    nlToArr(this.$refs.cellRow[0].childNodes).map(x => {\n      let rand = Math.round(Math.random())\n      x.classList.add(rand === 0 ? 'false' : 'true')\n    })\n    for (let i = 1; i < this.rows; i++) {\n      for (let j = 0; j < this.cellsPerRow; j++) {\n        if (j > 0 && j < this.cellsPerRow - 1) {\n          this.pattern.push(this.$refs.cellRow[i - 1].childNodes[j - 1].className)\n          this.pattern.push(this.$refs.cellRow[i - 1].childNodes[j].className)\n          this.pattern.push(this.$refs.cellRow[i - 1].childNodes[j + 1].className)\n        } else if (j === 0) {\n          this.pattern.push('false')\n          this.pattern.push(this.$refs.cellRow[i - 1].childNodes[j].className)\n          this.pattern.push(this.$refs.cellRow[i - 1].childNodes[j + 1].className)\n        } else if (j === this.cellsPerRow - 1) {\n          this.pattern.push(this.$refs.cellRow[i - 1].childNodes[j - 1].className)\n          this.pattern.push(this.$refs.cellRow[i - 1].childNodes[j].className)\n          this.pattern.push('false')\n        }\n        if (this.rule126()) {\n          this.$refs.cellRow[i].childNodes[j].classList.add('true')\n        } else {\n          this.$refs.cellRow[i].childNodes[j].classList.add('false')\n        }\n        this.pattern = []\n      }\n    }\n    for (let i = 0; i < this.rows; i++) {\n      setTimeout(() => this.$refs.cellRow[i].classList.add('show'), this.timeCount)\n      this.timeCount = this.timeCount + this.timeInterval\n    }\n  }\n}\n</script>"],"sourceRoot":"src/components"}]}