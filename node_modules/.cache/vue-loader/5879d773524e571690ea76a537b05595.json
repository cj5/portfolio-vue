{"remainingRequest":"/Users/chrisstack/Repos/portfolio-vue/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/chrisstack/Repos/portfolio-vue/src/components/CellularAutomata.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/chrisstack/Repos/portfolio-vue/src/components/CellularAutomata.vue","mtime":1587139916000},{"path":"/Users/chrisstack/Repos/portfolio-vue/node_modules/cache-loader/dist/cjs.js","mtime":1539835375000},{"path":"/Users/chrisstack/Repos/portfolio-vue/node_modules/babel-loader/lib/index.js","mtime":1539835372000},{"path":"/Users/chrisstack/Repos/portfolio-vue/node_modules/cache-loader/dist/cjs.js","mtime":1539835375000},{"path":"/Users/chrisstack/Repos/portfolio-vue/node_modules/vue-loader/lib/index.js","mtime":1539835376000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { nlToArr } from '../helpers'\n\nexport default {\n  name: 'CellularAutomata',\n  props: {\n    heroHt: Number\n  },\n  data() {\n    return {\n      cellSize: 10,\n      timeCount: 0,\n      timeInterval: 50,\n      pattern: [],\n    }\n  },\n  computed: {\n    cellsPerRow() {\n      return Math.ceil(window.innerWidth / this.cellSize)\n    },\n    rows() {\n      return Math.ceil(this.heroHt / this.cellSize)\n    },\n  },\n  methods: {\n    randomizeFirstRow() {\n      nlToArr(this.$refs.cellRow[0].childNodes).map(x => {\n        let rand = Math.round(Math.random())\n        x.classList.add(rand === 0 ? 'false' : 'true')\n      })\n    },\n    automatize(rule) {\n      for (let i = 1; i < this.rows; i++) {\n        let prevRow = this.$refs.cellRow[i - 1]\n        for (let j = 0; j < this.cellsPerRow; j++) {\n          if (j > 0 && j < this.cellsPerRow - 1) {\n            this.pattern.push(prevRow.childNodes[j - 1].className)\n            this.pattern.push(prevRow.childNodes[j].className)\n            this.pattern.push(prevRow.childNodes[j + 1].className)\n          } else if (j === 0) {\n            this.pattern.push('false')\n            this.pattern.push(prevRow.childNodes[j].className)\n            this.pattern.push(prevRow.childNodes[j + 1].className)\n          } else if (j === this.cellsPerRow - 1) {\n            this.pattern.push(prevRow.childNodes[j - 1].className)\n            this.pattern.push(prevRow.childNodes[j].className)\n            this.pattern.push('false')\n          }\n          if (rule()) {\n            this.$refs.cellRow[i].childNodes[j].classList.add('true')\n          } else {\n            this.$refs.cellRow[i].childNodes[j].classList.add('false')\n          }\n          this.pattern = []\n        }\n      }\n    },\n    showRows() {\n      for (let i = 0; i < this.rows; i++) {\n        setTimeout(() => this.$refs.cellRow[i].classList.add('show'), this.timeCount)\n        this.timeCount = this.timeCount + this.timeInterval\n      }\n    },\n    hideRows() {\n      for (let i = 0; i < this.rows; i++) {\n        this.$refs.cellRow[i].classList.remove('show')\n        for (let j = 0; j < this.cellsPerRow; j++) {\n          this.$refs.cellRow[i].childNodes[j].classList.remove('true')\n          this.$refs.cellRow[i].childNodes[j].classList.remove('false')\n        }\n      }\n    },\n    arraysEqual(a, b) {\n      if (a === b) return true\n      if (a == null || b == null) return false\n      if (a.length != b.length) return false\n\n      for (let i = 0; i < a.length; i++) {\n        if (a[i] !== b[i]) return false\n      }\n      return true\n    },\n    // CELLULAR AUTOMATA RULES\n    rule73() {\n      return this.arraysEqual(this.pattern, ['true', 'true', 'false']) ||\n      this.arraysEqual(this.pattern, ['false', 'true', 'true']) ||\n      this.arraysEqual(this.pattern, ['false', 'false', 'false'])\n    },\n    rule89() {\n      return this.arraysEqual(this.pattern, ['true', 'true', 'false']) ||\n      this.arraysEqual(this.pattern, ['true', 'false', 'false']) ||\n      this.arraysEqual(this.pattern, ['false', 'true', 'true']) ||\n      this.arraysEqual(this.pattern, ['false', 'false', 'false'])\n    },\n    rule126() {\n      return this.arraysEqual(this.pattern, ['true', 'true', 'false']) ||\n      this.arraysEqual(this.pattern, ['true', 'false', 'true']) ||\n      this.arraysEqual(this.pattern, ['true', 'false', 'false']) ||\n      this.arraysEqual(this.pattern, ['false', 'true', 'true']) ||\n      this.arraysEqual(this.pattern, ['false', 'true', 'false']) ||\n      this.arraysEqual(this.pattern, ['false', 'false', 'true'])\n    },\n    rule150() {\n      return this.arraysEqual(this.pattern, ['true', 'true', 'true']) ||\n      this.arraysEqual(this.pattern, ['true', 'false', 'false']) ||\n      this.arraysEqual(this.pattern, ['false', 'true', 'false']) ||\n      this.arraysEqual(this.pattern, ['false', 'false', 'true'])\n    },\n    rule183() {\n      return this.arraysEqual(this.pattern, ['true', 'true', 'true']) ||\n      this.arraysEqual(this.pattern, ['true', 'false', 'true']) ||\n      this.arraysEqual(this.pattern, ['true', 'false', 'false']) ||\n      this.arraysEqual(this.pattern, ['false', 'true', 'false']) ||\n      this.arraysEqual(this.pattern, ['false', 'false', 'true']) ||\n      this.arraysEqual(this.pattern, ['false', 'false', 'false'])\n    },\n    // [END] CELLULAR AUTOMATA RULES\n    switchRule(rule, event) {\n      this.hideRows()\n      this.randomizeFirstRow()\n      this.$nextTick(() => {\n        this.automatize(rule)\n        this.timeCount = 0\n        this.showRows()\n      })\n      nlToArr(this.$refs.ruleSelectors.childNodes).map(x => {\n        x.classList.remove('active')\n      })\n      event.target.classList.add('active')\n    }\n  },\n  mounted() {\n    this.randomizeFirstRow()\n    this.automatize(this.rule150)\n    console.log(this.$refs.ruleSelectors)\n    this.$refs.ruleSelectors.childNodes[3].classList.add('active')\n    this.showRows()\n  }\n}\n",{"version":3,"sources":["CellularAutomata.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8CA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"CellularAutomata.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"automata-wrap\">\n    <div \n      v-for=\"(i, key1) in rows\"\n      :key=\"key1\"\n      class=\"cell-row flex\" \n      ref=\"cellRow\"\n    >\n      <div\n        v-for=\"(j, key2) in cellsPerRow\" \n        :key=\"key2\"\n        :style=\"`width: ${cellSize}px; height: ${cellSize}px;`\"\n        ref=\"cell\"\n      ></div>\n    </div>\n    <!-- <div class=\"container\"> -->\n      <div class=\"automata-selector\">\n        <a href=\"https://mathworld.wolfram.com/ElementaryCellularAutomaton.html\" target=\"_blank\">Cellular Automaton ></a>\n        <div ref=\"ruleSelectors\">\n          <a \n            role=\"button\" \n            @click=\"switchRule(rule73, $event)\"\n          >Rule 73</a>\n          <a \n            role=\"button\" \n            @click=\"switchRule(rule89, $event)\"\n          >Rule 89</a>\n          <a \n            role=\"button\" \n            @click=\"switchRule(rule126, $event)\"\n          >Rule 126</a>\n          <a \n            role=\"button\" \n            @click=\"switchRule(rule150, $event)\"\n          >Rule 150</a>\n          <a \n            role=\"button\" \n            @click=\"switchRule(rule183, $event)\"\n          >Rule 183</a>\n        </div>\n      </div>\n    <!-- </div> -->\n  </div>\n</template>\n\n<script>\nimport { nlToArr } from '../helpers'\n\nexport default {\n  name: 'CellularAutomata',\n  props: {\n    heroHt: Number\n  },\n  data() {\n    return {\n      cellSize: 10,\n      timeCount: 0,\n      timeInterval: 50,\n      pattern: [],\n    }\n  },\n  computed: {\n    cellsPerRow() {\n      return Math.ceil(window.innerWidth / this.cellSize)\n    },\n    rows() {\n      return Math.ceil(this.heroHt / this.cellSize)\n    },\n  },\n  methods: {\n    randomizeFirstRow() {\n      nlToArr(this.$refs.cellRow[0].childNodes).map(x => {\n        let rand = Math.round(Math.random())\n        x.classList.add(rand === 0 ? 'false' : 'true')\n      })\n    },\n    automatize(rule) {\n      for (let i = 1; i < this.rows; i++) {\n        let prevRow = this.$refs.cellRow[i - 1]\n        for (let j = 0; j < this.cellsPerRow; j++) {\n          if (j > 0 && j < this.cellsPerRow - 1) {\n            this.pattern.push(prevRow.childNodes[j - 1].className)\n            this.pattern.push(prevRow.childNodes[j].className)\n            this.pattern.push(prevRow.childNodes[j + 1].className)\n          } else if (j === 0) {\n            this.pattern.push('false')\n            this.pattern.push(prevRow.childNodes[j].className)\n            this.pattern.push(prevRow.childNodes[j + 1].className)\n          } else if (j === this.cellsPerRow - 1) {\n            this.pattern.push(prevRow.childNodes[j - 1].className)\n            this.pattern.push(prevRow.childNodes[j].className)\n            this.pattern.push('false')\n          }\n          if (rule()) {\n            this.$refs.cellRow[i].childNodes[j].classList.add('true')\n          } else {\n            this.$refs.cellRow[i].childNodes[j].classList.add('false')\n          }\n          this.pattern = []\n        }\n      }\n    },\n    showRows() {\n      for (let i = 0; i < this.rows; i++) {\n        setTimeout(() => this.$refs.cellRow[i].classList.add('show'), this.timeCount)\n        this.timeCount = this.timeCount + this.timeInterval\n      }\n    },\n    hideRows() {\n      for (let i = 0; i < this.rows; i++) {\n        this.$refs.cellRow[i].classList.remove('show')\n        for (let j = 0; j < this.cellsPerRow; j++) {\n          this.$refs.cellRow[i].childNodes[j].classList.remove('true')\n          this.$refs.cellRow[i].childNodes[j].classList.remove('false')\n        }\n      }\n    },\n    arraysEqual(a, b) {\n      if (a === b) return true\n      if (a == null || b == null) return false\n      if (a.length != b.length) return false\n\n      for (let i = 0; i < a.length; i++) {\n        if (a[i] !== b[i]) return false\n      }\n      return true\n    },\n    // CELLULAR AUTOMATA RULES\n    rule73() {\n      return this.arraysEqual(this.pattern, ['true', 'true', 'false']) ||\n      this.arraysEqual(this.pattern, ['false', 'true', 'true']) ||\n      this.arraysEqual(this.pattern, ['false', 'false', 'false'])\n    },\n    rule89() {\n      return this.arraysEqual(this.pattern, ['true', 'true', 'false']) ||\n      this.arraysEqual(this.pattern, ['true', 'false', 'false']) ||\n      this.arraysEqual(this.pattern, ['false', 'true', 'true']) ||\n      this.arraysEqual(this.pattern, ['false', 'false', 'false'])\n    },\n    rule126() {\n      return this.arraysEqual(this.pattern, ['true', 'true', 'false']) ||\n      this.arraysEqual(this.pattern, ['true', 'false', 'true']) ||\n      this.arraysEqual(this.pattern, ['true', 'false', 'false']) ||\n      this.arraysEqual(this.pattern, ['false', 'true', 'true']) ||\n      this.arraysEqual(this.pattern, ['false', 'true', 'false']) ||\n      this.arraysEqual(this.pattern, ['false', 'false', 'true'])\n    },\n    rule150() {\n      return this.arraysEqual(this.pattern, ['true', 'true', 'true']) ||\n      this.arraysEqual(this.pattern, ['true', 'false', 'false']) ||\n      this.arraysEqual(this.pattern, ['false', 'true', 'false']) ||\n      this.arraysEqual(this.pattern, ['false', 'false', 'true'])\n    },\n    rule183() {\n      return this.arraysEqual(this.pattern, ['true', 'true', 'true']) ||\n      this.arraysEqual(this.pattern, ['true', 'false', 'true']) ||\n      this.arraysEqual(this.pattern, ['true', 'false', 'false']) ||\n      this.arraysEqual(this.pattern, ['false', 'true', 'false']) ||\n      this.arraysEqual(this.pattern, ['false', 'false', 'true']) ||\n      this.arraysEqual(this.pattern, ['false', 'false', 'false'])\n    },\n    // [END] CELLULAR AUTOMATA RULES\n    switchRule(rule, event) {\n      this.hideRows()\n      this.randomizeFirstRow()\n      this.$nextTick(() => {\n        this.automatize(rule)\n        this.timeCount = 0\n        this.showRows()\n      })\n      nlToArr(this.$refs.ruleSelectors.childNodes).map(x => {\n        x.classList.remove('active')\n      })\n      event.target.classList.add('active')\n    }\n  },\n  mounted() {\n    this.randomizeFirstRow()\n    this.automatize(this.rule150)\n    console.log(this.$refs.ruleSelectors)\n    this.$refs.ruleSelectors.childNodes[3].classList.add('active')\n    this.showRows()\n  }\n}\n</script>"]}]}